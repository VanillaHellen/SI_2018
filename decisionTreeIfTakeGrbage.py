from sklearn import tree


def buildTreeOfDecisions():
    properties = [[0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.8, 0.3, 0.0, 1.0, 0.1], [0.6, 0.6, 0.0, 1.0, 0.0, 0.0],
                  [0.8, 0.2, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 1.0, 0.0], [0.2, 0.8, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.2, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 1.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.8, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.2, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.8, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 1.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 1.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 1.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 1.0, 0.0, 0.0], [0.8, 0.8, 0.3, 1.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.9, 0.0, 0.0, 0.0, 0.0], [0.8, 0.9, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.9, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.6, 0.0, 0.0, 1.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.4, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.4, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.8, 0.3, 1.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 1.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 1.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.4, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.4, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.3, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 1.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.4, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.4, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.4, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.2, 0.4, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.4, 0.3, 1.0, 0.0, 0.1], [0.6, 0.6, 0.0, 1.0, 1.0, 0.0], [0.8, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.4, 0.0, 0.0, 0.0, 0.0], [0.8, 0.2, 0.3, 0.0, 0.0, 0.1], [0.9, 0.4, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.4, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.2, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 1.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.8, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.2, 0.0, 0.0, 0.0, 0.0], [0.2, 0.8, 0.0, 0.0, 0.0, 0.0],
                  [0.4, 0.2, 0.3, 0.0, 0.0, 0.1], [0.6, 0.8, 0.0, 0.0, 0.0, 0.0], [0.8, 0.2, 0.3, 0.0, 0.0, 0.1],
                  [0.9, 0.8, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.2, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.8, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.2, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.8, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0],
                  [0.8, 0.2, 0.3, 0.0, 0.0, 0.1], [0.9, 0.8, 0.0, 0.0, 1.0, 0.0], [0.2, 0.2, 0.0, 1.0, 0.0, 0.0],
                  [0.4, 0.2, 0.3, 0.0, 0.0, 0.1], [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 1.0, 0.0, 0.1],
                  [0.9, 0.9, 0.0, 0.0, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 0.0, 0.1],
                  [0.6, 0.6, 0.0, 0.0, 0.0, 0.0], [0.8, 0.8, 0.3, 0.0, 0.0, 0.1], [0.9, 0.9, 0.0, 0.0, 0.0, 0.0],
                  [0.2, 0.2, 0.0, 0.0, 0.0, 0.0], [0.4, 0.4, 0.3, 0.0, 1.0, 0.1]]

    types = ['yes', 'no', 'yes', 'no', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'no', 'no', 'yes', 'no', 'no',
             'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'no',
             'no', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes',
             'yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes',
             'no', 'no', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'no', 'yes', 'no',
             'yes', 'yes', 'no', 'yes', 'no', 'yes', 'no', 'no', 'no', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'no',
             'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'no',
             'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes', 'no', 'yes', 'yes',
             'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'no', 'yes']

    # [truckType, garbageType, isDisgusting, isPoossibleToTake, isItRaining, other ]

    cfl = tree.DecisionTreeClassifier()
    cfl = cfl.fit(properties, types)

    print('built the tree')
    return cfl


def predictDecision(t, a):
    prediction = t.predict(a)

    return prediction

# t = buildTreeOfDecisions()
# print (predictDecision(t, [[0.6, 0.6, 0.0, 0.0, 0.0, 0.0]]))
